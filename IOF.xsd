<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- This file describes the IOF data exchange format for a wide
   selection of orienteering information regarding an orienteering
   event.
   
   The file is organized in a number of sections:
   - Person
   - Competitor
   - Club
   - Event
   - Entries
   - Start List
   - Result List
   - Classes
   - Controls and Courses
   - "Office" elements, i.e. non-orienteering and generic
   
   In the top of each section is a reference to the name of the
   lists that are meant to be exchanged between different software
   packages used in an orienteering event.
   A quick reference to these lists are:
   - PersonList - rarely used
   - CompetitorList - "brutto" list, e.g. a national database
   - RankList - competitors in a ranking list, e.g. World Ranking
   - ClubList - club database, national or event specific
   - EventList - used for fixtures
   - ServiceRequestList - rarely used
   - EntryList - club ordered entries for an event
   - StartList - class ordered start list
   - ResultList - class ordered results, not necessarily complete
   - ClassData - list of classes, national or event specific
   - CourseData - list of controls and courses of an event

   Authors:
     Stefan Nordmark, SWE
     Kell SÃ¸nnichsen, DEN
     Finn Arildsen, DEN
     
   Date:
     01-2002
    
   Revised 07-2010 - 09-2010:
    Mats Troeng, SWE
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>
  <!-- IOF Version
     Version of this standard.
     This is changed whenever this standard is changed.
  -->
  <xs:element name="IOFVersion">
    <xs:complexType>
      <xs:attribute name="version" fixed="2.1" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- 
    ##########
    ### Person
    ##########
   
    Represents a person. This could either be a Competitor (see the
    Competitor section) or contact persons in a Club (see the Club
    section) or press (see the "Office" section).

    Lists to exchange:
      - PersonList

  -->

  <!-- PersonList
    List of persons. This is NOT to be used to exchange competitors.
    Use CompetitorList instead.
  -->
  <xs:element name="PersonList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Person" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- Person
    Basic information of a person, either a competitor, contact,
    press etc.
  -->
  <xs:element name="Person">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="PersonName"/>
        <xs:element ref="PersonId"/>
        <xs:element name="BirthDate" type="xs:date" minOccurs="0"/>
        <xs:element ref="Address" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Tele" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Nationality" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="sex">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="F"/>
            <xs:enumeration value="M"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="PersonName">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Family"/>
        <xs:element ref="Given" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Family">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="Given">
    <xs:complexType mixed="true">
      <xs:attribute name="sequence" type="xs:integer"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="PersonId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Nationality">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="CountryId"/>
        <xs:element ref="Country"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="Contact">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
        <xs:element ref="ContactType"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ContactType">
    <xs:complexType>
      <xs:attribute name="value" default="official">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="info"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="entry"/>
            <xs:enumeration value="financial"/>
            <xs:enumeration value="result"/>
            <xs:enumeration value="official"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- 
    ##########
    ### Competitor
    ##########
   
    Elements associated with a Competitor from ranking to control
    card.
    Other elements, e.g. Class, are found in other sections.
   
    Lists to exchange:
      - CompetitorList
      - RankList

  -->

  <!-- CompetitorList
    A list of competitors. This is used to exchange a "brutto" list
    of possible competitors.
    This should NOT be used to exchange entries, use EntryList
    instead.
  -->
  <xs:element name="CompetitorList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Competitor" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Competitor -->
  <xs:element name="Competitor">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
        <xs:choice>
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
          <xs:element ref="Country"/>
          <xs:element ref="CountryId"/>
        </xs:choice>
        <xs:element ref="PreSelectedClass" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="CCard" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Rank" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Rank">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="Name"/>
          <xs:element ref="OrganisationId"/>
          <xs:element ref="Organisation"/>
        </xs:choice>
        <xs:element ref="RankPosition"/>
        <xs:element ref="RankValue"/>
        <xs:element name="ValidFromDate" type="xs:date" minOccurs="0"/>
        <xs:element name="ValidToDate" type="xs:date" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="RankPosition">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="RankValue">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- Control Card -->
  <xs:element name="CCard">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CCardId"/>
        <xs:element ref="PunchingUnitType"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="miscData" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CCardId">
    <xs:complexType mixed="true"/>
  </xs:element>
 
  <!-- RankList
    List of competitors in a specific ranking list identified
    by the Name subelement, e.g. 'World Ranking List'.
  -->
  <xs:element name="RankList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Name"/>
        <xs:choice minOccurs="0">
          <xs:element ref="OrganisationId"/>
          <xs:element ref="Organisation"/>
        </xs:choice>
        <xs:element ref="Competitor" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!--
    ##########
    ### Club
    ##########
   
    Information about a Club, i.e. address, contact person(s) etc.
    Makes some use of the elements in the "Office" section.
    Lists to exchange:
      - ClubList
  -->

  <!-- Club List
    List of clubs including address and contact information.
  -->
  <xs:element name="ClubList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Club" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Club -->
  <xs:element name="Club">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ClubId"/>
        <xs:element ref="Name" minOccurs="0"/>
        <xs:element ref="ShortName"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- The name of the club as appearing in press result lists. -->
        <xs:element ref="PressName" minOccurs="0"/>
        <!-- The home city or geographical location of the club as appearing in press result lists. -->
        <!-- To be considered: should PressName and HomeCity be replaced with a single element containing all information? -->
        <xs:element ref="HomeCity"  minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <xs:element ref="OrganisationId" minOccurs="0"/>
        <xs:choice>
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element ref="Address" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Tele" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="WebURL" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Account" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Contact" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClubId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!--
    ##########
    ### Event
    ##########
   
    Elemnts holding event specific information
   
    Lists to exchange:
      - EventList
      - ServiceRequestList
  -->

  <!-- EventList
    A list holding a number of events and event classification.
    This can be used to exchange fixtures.
  -->
  <xs:element name="EventList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="EventClassification" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Event" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Event
    The main event element:
      - name of the event
      - start and finish dates (to support multiday events)
      - organizing club(s)
      - event officials
      - classes
      - races (i.e. event "days")
      - entry data (where to deliver entries)
      - services (e.g. accomodation)
      - web site information
      - accounts for fees
  -->
  <xs:element name="Event">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EventId"/>
        <xs:element ref="Name"/>
        <xs:choice>
          <xs:element ref="EventClassificationId"/>
          <xs:element ref="EventClassification"/>
        </xs:choice>
        <xs:element name="StartDate" type="dateAndOptionalTime" />
        <xs:element name="FinishDate" type="dateAndOptionalTime" minOccurs="0"/>
        <xs:element ref="EventOfficial" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Organiser" minOccurs="0"/>
        <xs:element ref="EventClass" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="EventRace" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="WebURL" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="EntryData" minOccurs="0"/>
        <xs:element ref="Service" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Account" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="eventForm" default="IndSingleDay">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="IndSingleDay"/>
            <xs:enumeration value="teamMultiDay"/>
            <xs:enumeration value="teamSingleDay"/>
            <xs:enumeration value="relay"/>
            <xs:enumeration value="IndMultiDay"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="EventId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="StartDate" type="dateAndOptionalTime" />
  <xs:element name="FinishDate" type="dateAndOptionalTime" />
  <xs:element name="Organiser">
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EventOfficial">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EventOfficialRole"/>
        <xs:choice>
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EventOfficialRole">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="EntryData">
    <xs:complexType>
      <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="Address"/>
        <xs:element ref="Tele"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Event Class
    A Class extended with event specific information, e.g. whether
    the class is transfered to another class due to lack of entries.
  -->
  <xs:element name="EventClass">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="ClassId"/>
          <xs:element ref="Class"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:choice>
            <xs:sequence>
              <xs:element ref="ClassRaceInfo"/>
              <xs:element ref="PunchingUnitType"/>
            </xs:sequence>
            <xs:sequence maxOccurs="unbounded">
              <xs:element ref="EventRaceId"/>
              <xs:element ref="ClassRaceInfo"/>
              <xs:element ref="PunchingUnitType"/>
            </xs:sequence>
          </xs:choice>
          <xs:element ref="TransferedToClass" minOccurs="0"/>
          <xs:element ref="DividedIntoClass"/>
        </xs:choice>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="TransferedToClass">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ClassId"/>
        <xs:element ref="ClassShortName"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="DividedIntoClass">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EventClass" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EntryClass">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ClassId"/>
        <xs:element ref="ClassShortName"/>
        <xs:element ref="EventClass"/>
      </xs:choice>
      <xs:attribute name="sequence" type="xs:integer"/>
    </xs:complexType>
  </xs:element>

  <!-- Event Classification
    e.g. 'World Ranking Event'
  -->
  <xs:element name="EventClassification">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EventClassificationId"/>
        <xs:element ref="Name"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EventClassificationId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Event Race 
    An event consists of a number of event races. The number is equal
    to the number of times a competitor should start:
      - one event race for a single day event
      - N event races for an N day event
      - two event races for a qualification and final (even if they
        are the same day)
  -->
  <xs:element name="EventRace">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EventRaceId"/>
        <xs:element ref="Name"/>
        <xs:element name="RaceDate" type="dateAndOptionalTime"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EventRaceId">
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <!-- Fee
    Competitor fees for entering the event.
  -->
  <xs:element name="EntryFee">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EntryFeeId" minOccurs="0"/>
        <xs:element ref="Name" minOccurs="0"/>
        <xs:element ref="Amount"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- The amount within an entry fee that is to be considered as an external fee (e g a federation tax). The Amount element includes the external fee. -->
        <xs:element ref="ExternalFee" minOccurs="0"/>
        <!-- The first entry date that the entry fee is valid for. -->
        <xs:element name="ValidFromDate" type="xs:dateTime" minOccurs="0"/>
        <!-- The last entry date that the entry fee is valid for. -->
        <xs:element name="ValidToDate" type="xs:dateTime" minOccurs="0"/>
        <!-- The start of the birth date interval that the entry fee should be applied to. -->
        <xs:element name="FromDateOfBirth" type="xs:date" minOccurs="0"/>
        <!-- The end of the birth date interval that the entry fee should be applied to. -->
        <xs:element name="ToDateOfBirth" type="xs:date" minOccurs="0"/>
        <!-- The order in which this entry fee is applied when calculating the total entry fee for a competitor. -->
        <xs:element ref="Sequence"/>
        <!-- END 2.1 proposal -->
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="taxIncluded" default="Y">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <!-- BEGIN 2.1 proposal -->
      <!-- Whether the entry fee is a fixed amount (in some currency) or a percentage (that is to be applied to entry fees with lower sequence). -->
      <xs:attribute name="valueOperator" default="fixed">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="fixed"/>
            <xs:enumeration value="percent"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <!-- END 2.1 proposal -->
    </xs:complexType>
  </xs:element>
  <xs:element name="EntryFeeId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Amount">
    <xs:complexType mixed="true">
      <xs:attribute name="currency" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- 
    ##########
    ### Entries
    ##########
   
    Elements supporting entries for an event, especially
    the persons entering
   
    Lists to exchange:
      - EntryList
  -->

  <!-- EntryList
    A number of Club Entries each holding a club, a club contact and
    the persons entering the competition, probably aggregated
    into teams if it is for a relay.
  -->
  <xs:element name="EntryList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="ClubEntry" minOccurs="0" maxOccurs="unbounded"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- Should be able to include entries that are not bound to a club. -->
        <xs:element ref="Entry" minOccurs="0" maxOccurs="unbounded"/>
        <!-- END 2.1 proposal -->
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClubEntry">
    <xs:complexType>
      <xs:sequence>
        <!-- BEGIN 2.1 proposal: added maxOccurs="unbounded" -->
        <!-- Support for multiple-club relay teams. -->
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
        </xs:choice>
        <!-- END 2.1 proposal -->
        <xs:element ref="Contact" minOccurs="0"/>
        <xs:element ref="Entry" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Entry
    An entry consists of 
    1) a person, his/hers personal control card, and a rank
       (e.g. from a ranking list, this could be needed by the event
       software to allocate starting times).
    2) a team, which holds a number of persons possibly ordered in
       a sequence within the team.
  -->
  <xs:element name="Entry">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="EntryId" minOccurs="0"/>
        <xs:choice>
          <xs:sequence>
            <xs:choice>
              <xs:element ref="PersonId"/>
              <xs:element ref="Person"/>
            </xs:choice>
            <!-- BEGIN 2.1 proposal -->
            <!-- Should be able to bind a person to a club, e g to define club membership for a person in a multiple-club relay team. -->
            <xs:choice>
              <xs:element ref="ClubId"/>
              <xs:element ref="Club"/>
            </xs:choice>
            <!-- END 2.1 proposal -->
            <xs:element ref="CCard" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="Rank" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element ref="TeamName"/>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
              <xs:choice>
                <xs:element ref="PersonId"/>
                <xs:element ref="Person"/>
              </xs:choice>
              <xs:choice minOccurs="0">
                <xs:element ref="ClubId"/>
                <xs:element ref="Club"/>
              </xs:choice>
              <xs:element ref="CCard" minOccurs="0" maxOccurs="unbounded"/>
              <xs:element ref="Rank" minOccurs="0" maxOccurs="unbounded"/>
              <xs:element ref="TeamSequence" minOccurs="0"/>
              <!-- BEGIN 2.1 proposal -->
              <!-- Support for defining the competitor starting order within a team at a parallel relay leg (e g 25-manna) -->
              <xs:element ref="LegOrder" minOccurs="0"/>
              <!-- END 2.1 proposal -->
            </xs:sequence>
          </xs:sequence>
        </xs:choice>
        <xs:element ref="EntryClass" minOccurs="0" maxOccurs="unbounded"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- Assign entry fees per person, not just per class, since competitors may have to pay different fees according to age, entry date, etc. -->
        <xs:element ref="EntryFee" minOccurs="0" maxOccurs="unbounded"/>
        <!-- END 2.1 proposal -->
        <xs:element ref="AllocationControl" minOccurs="0"/>
        <xs:element name="EntryDate" type="xs:dateTime"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="nonCompetitor" default="N">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="EntryId">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="TeamName">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="TeamSequence">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- AllocationControl
    Used to state start time allocation requests.
    It consists of a possible reference Club or Person and the
    allocation request, e.g. late start or grouped with the reference
    Club/Person.
    This way it is possible to state requests to the event organizer
    so that e.g. all members of a club has start times close to each
    other - or parents have start times far from each other.
    It is totally up to the event software and organizers whether
    they will support such requests.
  -->
  <xs:element name="AllocationControl">
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0">
          <xs:choice>
            <xs:element ref="ClubId"/>
            <xs:element ref="Club"/>
          </xs:choice>
          <xs:choice>
            <xs:element ref="PersonId"/>
            <xs:element ref="Person"/>
          </xs:choice>
        </xs:choice>
        <xs:element ref="AllocationControlType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="AllocationControlType">
    <xs:complexType>
      <xs:attribute name="value" default="normal">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="lateStart"/>
            <xs:enumeration value="normal"/>
            <xs:enumeration value="earlyStart"/>
            <xs:enumeration value="distributedFromRef"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="groupedWithRef"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- 
    ##########
    ### Start List
    ##########
   
    Elements maintaining information of the start and start list
   
    Lists to exchange:
      - StartList
  -->

  <!-- StartList
    A list containing the event (or identification) and a number
    of class start lists
  -->
  <xs:element name="StartList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:choice minOccurs="0">
          <xs:element ref="EventId"/>
          <xs:element ref="Event"/>
        </xs:choice>
        <xs:element ref="EventRaceId" minOccurs="0"/>
        <xs:element ref="ClassStart" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- ClassStart
    The start list of a single class containing either individual
    start times for competitors or team start times for relays
  -->
  <xs:element name="ClassStart">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="ClassId"/>
          <xs:element ref="ClassShortName"/>
          <xs:element ref="EventClass"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="PersonStart"/>
          <xs:element ref="TeamStart"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
 
  <!-- PersonStart
    The start time(s) of a single competitor. In case of a multi day
    event all start times are listed.
  -->
  <xs:element name="PersonStart">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element ref="Rank" minOccurs="0" maxOccurs="unbounded"/>
        <xs:choice>
          <xs:element ref="Start"/>
          <xs:element ref="RaceStart" maxOccurs="unbounded"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="TeamStart">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="TeamName"/>
        <xs:choice minOccurs="0">
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element ref="PersonStart" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Start
    The start information of a competitor of a single race.
    It contains the start number, bib number, control card of the
    competitor, the start time, the team order (if relay) and the
    course length.
  -->
  <xs:element name="Start">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="StartNumber" minOccurs="0"/>
        <xs:element ref="BibNumber" minOccurs="0"/>
        <xs:choice minOccurs="0">
          <xs:element ref="CCardId"/>
          <xs:element ref="CCard"/>
        </xs:choice>
        <xs:element name="StartTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element ref="TeamSequence" minOccurs="0"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- Support for defining the competitor starting order within a team at a parallel relay leg (e g 25-manna) -->
        <xs:element ref="LegOrder" minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <xs:element ref="CourseLength"/>
        <xs:element ref="StartId" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="RaceStart">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="EventRaceId"/>
          <xs:element ref="EventRace"/>
        </xs:choice>
        <xs:element ref="Start"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Start- and Bibnumber -->
  <xs:element name="StartNumber">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="BibNumber">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- 
    ##########
    ### ResultList
    ##########

    Results from an event. This can be a complete list (i.e. after
    the event), a snapshot (current standings - while the event is
    under way), or a delta list (changes since last list, meant for
    frequent exchange of results).

    Lists to exchange:
      - ResultList
  -->

  <!-- ResultList
    A result list containing an event (or identifier) and a number
    of class results. The list can be more or less complete as
    explained above.
  -->
  <xs:element name="ResultList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:choice minOccurs="0">
          <xs:element ref="EventId"/>
          <xs:element ref="Event"/>
        </xs:choice>
        <xs:element ref="EventRaceId" minOccurs="0"/>
        <xs:element ref="ClassResult" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="status" default="complete">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="complete"/>
            <xs:enumeration value="delta"/>
            <xs:enumeration value="snapshot"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- ClassResult
    Results from a single class. It consists of a Class and a number
    of person or team results.
  -->
  <xs:element name="ClassResult">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="ClassId"/>
          <xs:element ref="ClassShortName"/>
          <xs:element ref="EventClass"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="PersonResult"/>
          <xs:element ref="TeamResult"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="PersonResult">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element ref="Rank" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Result"/>
        <xs:element ref="RaceResult" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="TeamResult">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="TeamName"/>
        <xs:choice minOccurs="0">
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element ref="StartNumber" minOccurs="0"/>
        <xs:element ref="BibNumber" minOccurs="0"/>
        <xs:element name="StartTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element name="FinishTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element name="Time" type="timeSpan" minOccurs="0"/>
        <xs:element ref="ResultPosition" minOccurs="0"/>
        <xs:element ref="TeamStatus"/>
        <xs:element ref="Rank" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Point" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="PersonResult" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Result
    Overall result of a single competitor. For a multiday event
    this is the accumulated result
  -->
  <xs:element name="Result">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="StartNumber" minOccurs="0"/>
        <xs:element ref="BibNumber" minOccurs="0"/>
        <xs:choice minOccurs="0">
          <xs:element ref="CCardId"/>
          <xs:element ref="CCard"/>
        </xs:choice>
        <xs:element name="StartTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element name="FinishTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element name="Time" type="timeSpan" minOccurs="0"/>
        <xs:element ref="ResultPosition" minOccurs="0"/>
        <xs:element ref="CompetitorStatus"/>
        <xs:element ref="TeamSequence" minOccurs="0"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- Support for defining the competitor starting order within a team at a parallel relay leg (e g 25-manna) -->
        <xs:element ref="LegOrder" minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <xs:choice minOccurs="0">
          <xs:element ref="CourseVariationId"/>
          <xs:element ref="CourseVariation"/>
          <xs:element ref="CourseLength"/>
        </xs:choice>
        <xs:element ref="SplitTime" minOccurs="0" maxOccurs="unbounded"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- Support for Trail-O results. -->
        <xs:element ref="ControlAnswer" minOccurs="0" maxOccurs="unbounded"/>
        <!-- Support for GPS routes/tracking. -->
        <xs:element ref="Route" minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <xs:choice minOccurs="0">
          <xs:element ref="BadgeValueId"/>
          <xs:element ref="BadgeValue"/>
        </xs:choice>
        <xs:element ref="Point" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- RaceResult
    Result for a single Competitor in a single Event Race
  -->
  <xs:element name="RaceResult">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="EventRaceId"/>
          <xs:element ref="EventRace"/>
        </xs:choice>
        <xs:element ref="Result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- Status
    The status of the competitor or team at the time of the result
    generation:
      - Inactive      : Has not yet started
      - DidNotStart   : Did Not Start (in this race)
      - Active        : Currently on course
      - Finished      : Finished but not validated
      - OK            : Finished and validated
      - MisPunch      : Missing Punch
      - DidNotFinish  : Did Not Finish
      - Disqualified  : Disqualified
      - NotCompeting  : Not Competing (running outside the competition)
      - SportWithdr   : Sporting Withdrawal (e.g. helping injured)
      - OverTime      : Overtime, i.e. did not finish within max time
      - Moved         : Moved to another class
      - MovedUp       : Moved to a "better" class, in case of entry
                        restrictions
      - Cancelled     : The competitor has cancelled his/hers entry
  -->
  <xs:element name="CompetitorStatus">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="Inactive"/>
            <xs:enumeration value="MisPunch"/>
            <xs:enumeration value="DidNotStart"/>
            <xs:enumeration value="MovedUp"/>
            <xs:enumeration value="OverTime"/>
            <xs:enumeration value="Moved"/>
            <xs:enumeration value="Active"/>
            <xs:enumeration value="Disqualified"/>
            <xs:enumeration value="DidNotFinish"/>
            <xs:enumeration value="Cancelled"/>
            <xs:enumeration value="SportWithdr"/>
            <xs:enumeration value="OK"/>
            <xs:enumeration value="NotCompeting"/>
            <xs:enumeration value="Finished"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="TeamStatus">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="Inactive"/>
            <xs:enumeration value="MisPunch"/>
            <xs:enumeration value="DidNotStart"/>
            <xs:enumeration value="MovedUp"/>
            <xs:enumeration value="OverTime"/>
            <xs:enumeration value="Moved"/>
            <xs:enumeration value="Active"/>
            <xs:enumeration value="Disqualified"/>
            <xs:enumeration value="DidNotFinish"/>
            <xs:enumeration value="Cancelled"/>
            <xs:enumeration value="SportWithdr"/>
            <xs:enumeration value="OK"/>
            <xs:enumeration value="NotCompeting"/>
            <xs:enumeration value="Finished"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <!-- Point
    The point earned in this event for some purpose, e.g. a ranking
    list. The 'type' attribute is used to specify which purpose.
  -->
  <xs:element name="Point">
    <xs:complexType>
      <xs:attribute name="type" use="required" type="xs:string"/>
      <xs:attribute name="value" use="required" type="xs:decimal"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ResultPosition">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="SplitTime">
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0">
          <xs:element ref="ControlCode"/>
          <xs:element ref="Control"/>
        </xs:choice>
        <xs:element name="Time" type="timeSpan" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="sequence" use="required" type="xs:integer"/>
    </xs:complexType>
  </xs:element>
  
  <!-- Competition Badge -->
  <xs:element name="BadgeList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="BadgeValue" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="BadgeLimit" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="BadgeValue">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="BadgeValueId"/>
        <xs:element ref="Name"/>
        <xs:element ref="ShortName" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="BadgeValueId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="BadgeLimit">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="BadgeValueId"/>
          <xs:element ref="BadgeValue"/>
        </xs:choice>
        <xs:choice>
          <xs:element ref="EventClassificationId"/>
          <xs:element ref="EventClassification"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:element ref="ClassTypeId"/>
          <xs:element ref="ClassType"/>
        </xs:choice>
        <xs:element ref="TimeFactor"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="TimeFactor">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- Result Selection
    Used to specify subresults of interest for the press (see the
    Press element in the "Office" section). The selection consists
    of a list of organisations, clubs, classes and a max position
    in the list, e.g. the top 3.
  -->
  <xs:element name="ResultSelection">
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="OrganisationId"/>
          <xs:element ref="Organisation"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="ClassId"/>
          <xs:element ref="ClassShortName"/>
          <xs:element ref="Class"/>
        </xs:choice>
        <xs:element ref="Position"/>
        <!-- BEGIN 2.1 proposal: proposal by Per-Erik Modig -->
        <xs:element ref="MaxPosition" minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Position">
    <xs:complexType mixed="true"/>
  </xs:element>
  <!-- BEGIN 2.1 proposal: proposal by Per-Erik Modig -->
  <xs:element name="MaxPosition">
    <xs:complexType mixed="true"/>
  </xs:element>
  <!-- END 2.1 proposal -->

  <!--
    ##########
    ### Class
    ##########
   
    Elements associated with an Event Class - this being a real
    class in the event or a "standard" class.
    Lists to exchange are:
      - ClassData
  -->

  <!-- Class Data
    A list of classes.
  -->
  <xs:element name="ClassData">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="ClassType" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Class" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClassType">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ClassTypeId"/>
        <xs:element ref="Name"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClassTypeId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Class -->
  <xs:element name="Class">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ClassId"/>
        <xs:element ref="Name" minOccurs="0"/>
        <xs:element ref="ClassShortName"/>
        <!-- BEGIN 2.1 proposal -->
        <!-- Keeping track of status of class (e g if results should be considered invalid due to misplaced constrols) -->
        <xs:element ref="EventClassStatus" minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <!-- BEGIN 2.1 proposal: added maxOccurs="unbounded" -->
        <!-- One class may have multiple class types. -->
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <!-- END 2.1 proposal -->
          <xs:element ref="ClassTypeId"/>
          <xs:element ref="ClassType"/>
        </xs:choice>
        <xs:element ref="SubstituteClass" minOccurs="0"/>
        <xs:element ref="NotQualifiedSubstituteClass" minOccurs="0"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="EntryFeeId"/>
          <xs:element ref="EntryFee"/>
        </xs:choice>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="lowAge" type="xs:integer"/>
      <xs:attribute name="highAge" type="xs:integer"/>
      <xs:attribute name="sex" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="B"/>
            <xs:enumeration value="F"/>
            <xs:enumeration value="M"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="numberInTeam" default="1" type="xs:integer"/>
      <xs:attribute name="teamEntry" default="N">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="maxNumberInClass" type="xs:integer"/>
      <xs:attribute name="actualForRanking" default="N">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="timePresentation" default="Y">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="allowedMinAge" type="xs:integer"/>
      <xs:attribute name="allowedMaxAge" type="xs:integer"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClassId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClassShortName">
    <xs:complexType mixed="true">
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <!-- BEGIN 2.1 proposal -->
  <xs:element name="EventClassStatus">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="normal"/>
            <xs:enumeration value="invalidated"/>
            <xs:enumeration value="invalidatedNoFee"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- END 2.1 proposal -->
  <xs:element name="SubstituteClass">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ClassId"/>
        <xs:element ref="ClassShortName"/>
        <xs:element ref="Class"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="NotQualifiedSubstituteClass">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ClassId"/>
        <xs:element ref="ClassShortName"/>
        <xs:element ref="Class"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="PreSelectedClass">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ClassId"/>
        <xs:element ref="ClassShortName"/>
        <xs:element ref="Class"/>
      </xs:choice>
      <xs:attribute name="sequence" type="xs:integer"/>
    </xs:complexType>
  </xs:element>

  <!-- Class Race Info
    Information about a class with respect to an event.
    The Class information above may make sense without attachment
    to an event, the information below doesn't.
  -->
  <xs:element name="ClassRaceInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="FirstStart" type="xs:dateTime" minOccurs="0"/>
        <xs:element name="StartInterval" type="timeSpan" minOccurs="0"/>
        <xs:element name="EstimatedBestTime" type="timeSpan" minOccurs="0"/>
        <xs:element name="EstimatedLastPrizeTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element name="PrizeCeremonyTime" type="xs:dateTime" minOccurs="0"/>
        <xs:element ref="AllocationMethod" minOccurs="0"/>
        <xs:element ref="StartMethod" minOccurs="0"/>
        <xs:element ref="ClassRaceStatus"/>
        <xs:element ref="CourseVariationId" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="numberOfVacants" type="xs:integer"/>
      <xs:attribute name="rankingRace" default="N">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="numberOfPrizes" type="xs:integer"/>
      <xs:attribute name="bibNumberPrefix" type="xs:string"/>
      <xs:attribute name="bibNumberBase" type="xs:integer"/>
      <xs:attribute name="finishChute" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="AllocationMethod">
    <xs:complexType>
      <xs:attribute name="value" default="normal">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="manual"/>
            <xs:enumeration value="group"/>
            <xs:enumeration value="seeded"/>
            <xs:enumeration value="normal"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="invertedResult"/>
            <xs:enumeration value="preseedingResult"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="StartMethod">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="allocatTime"/>
            <xs:enumeration value="limitedPunching"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="punching"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClassRaceStatus">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="notAllocated"/>
            <xs:enumeration value="finished"/>
            <xs:enumeration value="deleted"/>
            <xs:enumeration value="allocated"/>
            <xs:enumeration value="started"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!--
    ##########
    ### Control and Courses
    ##########
   
    All elements with information about controls and courses.
    Only exception is the Control Card, which is found in the
    Competitor section.
   
    Lists to exchange:
      - CourseData
  -->

  <!-- CourseData
    A list of starting points, finish controls, "real" controls,
    and courses. This defines all the control and course information.
  -->
  <xs:element name="CourseData">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Map" minOccurs="0"/>
        <xs:element ref="StartPoint" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Control" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="FinishPoint" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Course" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Control
    A Control consists of a control code, a description, a position
    in the terrain, a position on the map and a punching unit.
    This element is not the one used in the courses. For that, see
    CourseControl below.
  -->
  <xs:element name="Control">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ControlCode"/>
        <xs:element ref="Description" minOccurs="0"/>
        <xs:element ref="ControlPosition" minOccurs="0"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="PunchingUnit"/>
          <xs:element ref="PunchPattern"/>
        </xs:choice>
        <xs:element ref="PunchingUnitType" minOccurs="0"/>
        <xs:element ref="MapPosition" minOccurs="0"/>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Description">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Box" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Box">
    <xs:complexType>
      <xs:choice minOccurs="0">
        <xs:element ref="Symbol" maxOccurs="unbounded"/>
        <xs:element ref="Text"/>
      </xs:choice>
      <xs:attribute name="column" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="A"/>
            <xs:enumeration value="B"/>
            <xs:enumeration value="C"/>
            <xs:enumeration value="D"/>
            <xs:enumeration value="E"/>
            <xs:enumeration value="F"/>
            <xs:enumeration value="G"/>
            <xs:enumeration value="H"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="hasDiagonal" default="N">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Symbol">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="SymbolId"/>
        <xs:element ref="Name" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SymbolId">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="Text">
    <xs:complexType mixed="true">
      <xs:attribute name="languageId" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ControlCode">
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <!-- ControlPosition
    Position of the Control in the terrain
  -->
  <xs:element name="ControlPosition">
    <xs:complexType>
      <xs:attribute name="x" use="required" type="xs:double"/>
      <xs:attribute name="y" use="required" type="xs:double"/>
      <!-- BEGIN 2.1 proposal -->
      <!-- Elevation of control (always in meters, irrespecive of the unit attribute), proposed by Diethard Kundisch. -->
      <xs:attribute name="z" use="optional" type="xs:double"/>
      <!-- END 2.1 proposal -->
      <xs:attribute name="unit" default="m">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="ft"/>
            <xs:enumeration value="WGS-84"/>
            <xs:enumeration value="km"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="m"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <!-- Map
    Information of the map used, scale and upper left corner of the
    bitmap used in course setting software wrt. the "real" map (yes,
    this _is_ in fact used!)
  -->
  <xs:element name="Map">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Scale"/>
        <xs:element ref="MapPosition"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Scale">
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <!-- MapPosition
    Position of the Control on the Map
  -->
  <xs:element name="MapPosition">
    <xs:complexType>
      <xs:attribute name="x" use="required" type="xs:double"/>
      <xs:attribute name="y" use="required" type="xs:double"/>
      <xs:attribute name="unit" default="mm">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="other"/>
            <xs:enumeration value="mm"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- StartPoint
    Special control defining the starting point of a Course
  -->
  <xs:element name="StartPoint">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="StartPointCode"/>
        <xs:element ref="Description" minOccurs="0"/>
        <xs:element ref="ControlPosition" minOccurs="0"/>
        <xs:element ref="MapPosition" minOccurs="0"/>
        <xs:element ref="Comment" minOccurs="0"/>
        <xs:element ref="DistanceFromStart" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="StartPointCode">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="DistanceFromStart">
    <xs:complexType mixed="true">
      <xs:attribute name="unit" default="m">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="ft"/>
            <xs:enumeration value="km"/>
            <xs:enumeration value="m"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Info">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- FinishPoint
    Special control positioned on the finish line. In case of
    electronic punching systems this control can be a real control,
    otherwise it is probably a virtual control.
  -->
  <xs:element name="FinishPoint">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="FinishPointCode"/>
        <xs:element ref="Description" minOccurs="0"/>
        <xs:element ref="ControlPosition" minOccurs="0"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="PunchingUnit"/>
          <xs:element ref="PunchPattern"/>
        </xs:choice>
        <xs:element ref="PunchingUnitType" minOccurs="0"/>
        <xs:element ref="MapPosition" minOccurs="0"/>
        <xs:element ref="Comment" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="FinishPointCode">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- Course
    A Course consists of one or more Course Variations. This is done
    to support relays using "gaffling".
  -->
  <xs:element name="Course">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CourseName"/>
        <xs:element ref="CourseId" minOccurs="0"/>
        <xs:element ref="EventId" minOccurs="0"/>
        <xs:element ref="EventRaceId" minOccurs="0"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="ClassId"/>
          <xs:element ref="ClassShortName"/>
        </xs:choice>
        <xs:element ref="CourseVariation" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="CourseSectionList" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseName">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="CourseId">
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <!-- Course Variation
    Consists of a name, length, climb, start point, a number of
    course controls and a finish.
  -->
  <xs:element name="CourseVariation">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CourseVariationId"/>
        <xs:element ref="Name" minOccurs="0"/>
        <xs:element ref="CourseLength"/>
        <xs:element ref="CourseClimb" minOccurs="0"/>
        <xs:choice minOccurs="0">
          <xs:element ref="StartPointCode"/>
          <xs:element ref="StartPoint"/>
        </xs:choice>
        <xs:element ref="FinishChute" minOccurs="0"/>
        <!-- BEGIN 2.1 addition -->
        <!-- added minOccurs="0" - might sometimes want to express course variation id and course length but not the controls -->
        <xs:element ref="CourseControl" minOccurs="0" maxOccurs="unbounded"/>
        <!-- END 2.1 addition -->
        <xs:choice minOccurs="0">
          <xs:element ref="FinishPointCode"/>
          <xs:element ref="FinishPoint"/>
        </xs:choice>
        <xs:element ref="DistanceToFinish" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="numberOfRunners" type="xs:integer"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseVariationId">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="CourseLength">
    <xs:complexType mixed="true">
      <xs:attribute name="unit" default="m">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="ft"/>
            <xs:enumeration value="km"/>
            <xs:enumeration value="m"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseClimb">
    <xs:complexType mixed="true">
      <xs:attribute name="unit" default="m">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="ft"/>
            <xs:enumeration value="km"/>
            <xs:enumeration value="m"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="StartId">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="FinishChute">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="FinishId">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="DistanceToFinish">
    <xs:complexType mixed="true">
      <!-- TODO: what attribute type? -->
      <xs:attribute name="FromControl" type="xs:anySimpleType"/>
      <xs:attribute name="unit" default="m">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="ft"/>
            <xs:enumeration value="km"/>
            <xs:enumeration value="m"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseSectionList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="StartPointCode" minOccurs="0"/>
        <xs:element ref="CourseSection" maxOccurs="unbounded"/>
        <xs:element ref="FinishPointCode" minOccurs="0"/>
        <xs:element ref="DistanceToFinish" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseSection">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CourseSectionId"/>
        <xs:element ref="CourseBranch" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseSectionId">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="CourseBranch">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CourseBranchId"/>
        <xs:element ref="CourseControl" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CourseBranchId">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- CourseControl
    A control included in a course. It consists of a sequence number,
    a "real" control, a leglength and a position on the map for the
    control text, i.e. its sequence number.
  -->
  <xs:element name="CourseControl">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Sequence"/>
        <xs:choice>
          <xs:element ref="ControlCode"/>
          <xs:element ref="Control"/>
        </xs:choice>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="LegLength" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="MapTextPosition" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="markedRoute" default="N">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="N"/>
            <xs:enumeration value="Y"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="LegLength">
    <xs:complexType mixed="true">
      <!-- TODO: what attribute type? -->
      <xs:attribute name="FromControl" type="xs:anySimpleType"/>
      <xs:attribute name="unit" default="m">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="ft"/>
            <xs:enumeration value="km"/>
            <xs:enumeration value="m"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Sequence">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="MapTextPosition">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="MapPosition"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Punching -->
  <xs:element name="PunchingUnit">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="UnitCode"/>
        <xs:element ref="PunchingUnitType"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UnitCode">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="PunchingUnitType">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="manual"/>
            <xs:enumeration value="Emit"/>
            <xs:enumeration value="SI"/>
            <xs:enumeration value="other"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="PunchPattern">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- 
    ##########
    ### "Office" elements
    ##########
   
    The following elements are used for non-orienteering purposes,
    i.e. accomodation, payment, addresses, press, dates etc.
   
    Also different "general purpose" elements, e.g. date and time.
   
    Lists to exchange:
      - OrganisationList
      - TransactionList
  -->

  <!-- Name -->
  <xs:element name="Name">
    <xs:complexType mixed="true">
      <xs:attribute name="languageId" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ShortName">
    <xs:complexType mixed="true">
      <xs:attribute name="languageId" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Comment -->
  <xs:element name="Comment">
    <xs:complexType mixed="true">
      <!-- TODO: what attribute type? -->
      <xs:attribute name="languageId" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Organisation
    An element representing "organisations" in a wider sense, i.e.
    clubs, federations, authorities, tv, etc.
    An organisation can contain suborganisations.
  -->
  <xs:element name="Organisation">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="OrganisationId"/>
        <xs:element ref="Name"/>
        <xs:element ref="ShortName" minOccurs="0"/>
        <xs:choice>
          <xs:element ref="OrganisationTypeId"/>
          <xs:element ref="OrganisationType"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element ref="Address" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Tele" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Account" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Contact" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="SubOrganisation" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OrganisationId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SubOrganisationType">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="OrganisationTypeId"/>
        <xs:element ref="OrganisationType"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="SubOrganisation">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="OrganisationId"/>
        <xs:element ref="Organisation"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- OrganisationList
    List of organisations and their types.
  -->
  <xs:element name="OrganisationList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="OrganisationType" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OrganisationType">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="OrganisationTypeId"/>
        <xs:element ref="Name"/>
        <xs:element ref="SubOrganisationType" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OrganisationTypeId">
    <xs:complexType mixed="true">
      <xs:attribute name="type">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="reg"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="nat"/>
            <xs:enumeration value="loc"/>
            <xs:enumeration value="int"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="idManager" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- BEGIN 2.1 proposal -->
  <!-- The name of the club as appearing in press result lists. -->
  <xs:element name="PressName">
    <xs:complexType mixed="true" />
  </xs:element>
  <!-- The home city or geographical location of the club as appearing in press result lists. -->
  <!-- To be considered: should PressName and HomeCity be replaced with a single element containing all information? -->
  <xs:element name="HomeCity">
    <xs:complexType mixed="true" />
  </xs:element>
  <!-- END 2.1 proposal -->

  <!-- Press
    A special organisation that can contain a request for a
    special selection of results after the event. E.g. a foreign
    paper can have a speciel interest in the results of the
    competitors of that nationality.
  -->
  <xs:element name="Press">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Name"/>
        <xs:element ref="Contact" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Address" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="Tele" minOccurs="0" maxOccurs="unbounded"/>
        <xs:choice>
          <xs:element ref="Country"/>
          <xs:element ref="CountryId"/>
        </xs:choice>
        <xs:element ref="ResultSelection" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="mediaType" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="magazine"/>
            <xs:enumeration value="tv"/>
            <xs:enumeration value="paper"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="web"/>
            <xs:enumeration value="radio"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- PressList
    A list of Press elements
  -->
  <xs:element name="PressList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Press" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Service
    A general purpose service request, e.g. for accomodation.
  -->
  <xs:element name="Service">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ServiceId"/>
        <xs:element ref="Name"/>
        <xs:element ref="Amount"/>
        <xs:element ref="Comment" minOccurs="0"/>
        <xs:element ref="MaxNumber" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ServiceId">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- Service Request List
    List of requests from clubs and organisations.
  -->
  <xs:element name="ServiceRequestList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="ClubServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="OrganisationServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClubServiceRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
        </xs:choice>
        <xs:element ref="ServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="PersonServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OrganisationServiceRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="OrganisationId"/>
          <xs:element ref="Organisation"/>
        </xs:choice>
        <xs:element ref="ServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="PersonServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="PersonServiceRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
        <xs:element ref="ServiceRequest" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ServiceRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="ServiceId"/>
          <xs:element ref="Service"/>
        </xs:choice>
        <xs:element ref="ServiceOrderNumber" minOccurs="0"/>
        <xs:element ref="RequestedQuantity"/>
        <xs:element ref="DeliveredQuantity" minOccurs="0"/>
        <xs:element ref="Comment" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="MaxNumber">
    <xs:complexType mixed="true">
      <xs:attribute name="unit" default="Pcs" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="RequestedQuantity">
    <xs:complexType mixed="true">
      <xs:attribute name="unit" default="Pcs" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeliveredQuantity">
    <xs:complexType mixed="true">
      <xs:attribute name="unit" default="Pcs" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ServiceOrderNumber">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- Account -->
  <xs:element name="Account">
    <xs:complexType mixed="true">
      <xs:attribute name="type" default="postalGiro">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="bankGiro"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="postalGiro"/>
            <xs:enumeration value="bankAccount"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Transaction
    A financial transaction between two accounts, possibly linked
    to a number of entries and/or service requests.
  -->
  <xs:element name="Transaction">
    <xs:complexType>
      <xs:sequence>
        <!-- BEGIN 2.1 proposal: added minOccurs="0" -->
        <!-- Sometimes it is not necessary to include account information. -->
        <xs:element ref="Account" minOccurs="0"/>
        <!-- END 2.1 proposal -->
        <xs:element ref="ForeignAccount" minOccurs="0"/>
        <!-- BEGIN 2.1 proposal: added minOccurs="0" -->
        <!-- Sometimes it is not necessary to include information about the transaction date. -->
        <xs:element name="Date" type="xs:dateTime" minOccurs="0" />
        <!-- END 2.1 proposal -->
        <xs:element ref="Amount"/>
        <xs:choice>
          <xs:element ref="ClubId"/>
          <xs:element ref="Club"/>
          <xs:element ref="OrganisationId"/>
          <xs:element ref="Organisation"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="PersonId"/>
          <xs:element ref="Person"/>
        </xs:choice>
        <xs:element ref="EntryId" minOccurs="0" maxOccurs="unbounded"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="ServiceOrderNumber"/>
          <xs:element ref="ServiceId"/>
          <xs:element ref="Service"/>
        </xs:choice>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ForeignAccount">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Account"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- TransactionList
    A list of transactions.
  -->
  <xs:element name="TransactionList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:choice>
          <xs:element ref="EventId"/>
          <xs:element ref="Event"/>
        </xs:choice>
        <xs:element ref="Transaction" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Address -->
  <xs:element name="Address">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="AddressType" minOccurs="0"/>
        <xs:choice minOccurs="0">
          <xs:element ref="CountryId"/>
          <xs:element ref="Country"/>
        </xs:choice>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="careOf" type="xs:string"/>
      <xs:attribute name="street" use="required" type="xs:string"/>
      <xs:attribute name="city" use="required" type="xs:string"/>
      <xs:attribute name="zipCode" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="AddressType">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="other"/>
            <xs:enumeration value="official"/>
            <xs:enumeration value="work"/>
            <xs:enumeration value="home"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="CountryList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="Country" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- Country -->
  <xs:element name="Country">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CountryId"/>
        <xs:element ref="Name" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- BEGIN 2.1 proposal -->
  <!-- TODO: use ISO 3166 country codes instead of enumeration -->
  <!-- Problem: ISO 3166 and IOF country codes differ in some cases, use two attributes "value" (for iso) and "iofCode"? Or move "iofCode" to Country element? -->
  <!-- Proposal :
  <xs:element name="CountryId">
    <xs:complexType>
      <xs:attribute name="value" use="required" />
      <xs:attribute name="iofCode" use="optional" />
    </xs:complexType>
  </xs:element>
  -->
  <!-- END 2.1 proposal -->
  <xs:element name="CountryId">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="IRL"/>
            <xs:enumeration value="POL"/>
            <xs:enumeration value="GBR"/>
            <xs:enumeration value="CRO"/>
            <xs:enumeration value="POR"/>
            <xs:enumeration value="HKG"/>
            <xs:enumeration value="ISL"/>
            <xs:enumeration value="MDA"/>
            <xs:enumeration value="ITA"/>
            <xs:enumeration value="ISR"/>
            <xs:enumeration value="JPN"/>
            <xs:enumeration value="VEN"/>
            <xs:enumeration value="LTU"/>
            <xs:enumeration value="CHI"/>
            <xs:enumeration value="RUS"/>
            <xs:enumeration value="CHN"/>
            <xs:enumeration value="CUB"/>
            <xs:enumeration value="BLR"/>
            <xs:enumeration value="PRK"/>
            <xs:enumeration value="FIN"/>
            <xs:enumeration value="NZL"/>
            <xs:enumeration value="GER"/>
            <xs:enumeration value="DEN"/>
            <xs:enumeration value="GRE"/>
            <xs:enumeration value="KAZ"/>
            <xs:enumeration value="ARG"/>
            <xs:enumeration value="AFG"/>
            <xs:enumeration value="UKR"/>
            <xs:enumeration value="TPE"/>
            <xs:enumeration value="NOR"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="KOR"/>
            <xs:enumeration value="YUG"/>
            <xs:enumeration value="SUI"/>
            <xs:enumeration value="ECU"/>
            <xs:enumeration value="NED"/>
            <xs:enumeration value="SVK"/>
            <xs:enumeration value="LAT"/>
            <xs:enumeration value="INA"/>
            <xs:enumeration value="IND"/>
            <xs:enumeration value="BEL"/>
            <xs:enumeration value="SWE"/>
            <xs:enumeration value="CAN"/>
            <xs:enumeration value="BRA"/>
            <xs:enumeration value="CZE"/>
            <xs:enumeration value="AUS"/>
            <xs:enumeration value="AUT"/>
            <xs:enumeration value="MKD"/>
            <xs:enumeration value="SKN"/>
            <xs:enumeration value="ROM"/>
            <xs:enumeration value="SWZ"/>
            <xs:enumeration value="SLO"/>
            <xs:enumeration value="COL"/>
            <xs:enumeration value="ESP"/>
            <xs:enumeration value="EST"/>
            <xs:enumeration value="ALG"/>
            <xs:enumeration value="PAK"/>
            <xs:enumeration value="JAM"/>
            <xs:enumeration value="MAS"/>
            <xs:enumeration value="HUN"/>
            <xs:enumeration value="USA"/>
            <xs:enumeration value="YOG"/>
            <xs:enumeration value="URU"/>
            <xs:enumeration value="RSA"/>
            <xs:enumeration value="FRA"/>
            <xs:enumeration value="BUL"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Tele -->
  <xs:element name="Tele">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="TeleType" minOccurs="0"/>
        <xs:element name="ModifyDate" type="xs:dateTime" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="phoneNumber" type="xs:string"/>
      <xs:attribute name="faxNumber" type="xs:string"/>
      <xs:attribute name="mobilePhoneNumber" type="xs:string"/>
      <xs:attribute name="mailAddress" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="TeleType">
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="other"/>
            <xs:enumeration value="official"/>
            <xs:enumeration value="work"/>
            <xs:enumeration value="home"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Web -->
  <xs:element name="WebURL">
    <xs:complexType mixed="true"/>
  </xs:element>
 
  
  <!-- BEGIN 2.1 proposal -->
  
  <!-- The amount within an entry fee that is to be considered as an external fee (e g a federation tax). -->
  <xs:element name="ExternalFee">
    <xs:complexType mixed="true">
      <xs:attribute name="currency" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  
  <!-- Describes the starting order on a parallel relay leg for a competitor (e g 25-manna). -->
  <xs:element name="LegOrder">
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <!-- Element describing the correct answer, the selected answer and the time used on a Trail-O control. -->
  <xs:element name="ControlAnswer">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Answer"/>
        <xs:element ref="CorrectAnswer"/>
        <xs:element name="Time" type="timeSpan" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- Element describing the correct answer for a Trail-O control. -->
  <xs:element name="CorrectAnswer">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- Element describing the answer selected by the competitor for a Trail-O control. -->
  <xs:element name="Answer">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- 
  *** GPS ROUTES / TRACKING ***

  Comment: Describing a route in xml is rather "chatty", leading to very large amount of data when there are many competitors. 
  There is probably need for some compression (e g binary data expressed as a base64-encoded string). An idea is to place 
  compressed data in the CompressedRelativeRoutePoints element, while uncompressed data is placed in multiple 
  RoutePoint/RelativeRoutePoint elements depending on the nature of the points.
  -->
  
  <!-- A competitor's route, recorded by a tracking device. A route contains a number of route points, 
  where every point has x coordinate, y coordinate, z coordinate (optionally) and time. -->
  <xs:element name="Route">
    <xs:complexType>
      <xs:sequence>
        <!-- The starting point of the route is always absolute -->
        <xs:element ref="RoutePoint"/>
        <!-- The rest of the points may be absolute, relative or compressed relative -->
        <xs:choice>
          <xs:element ref="RoutePoint" minOccurs="1" maxOccurs="unbounded"/>
          <xs:element ref="RelativeRoutePoint" minOccurs="1" maxOccurs="unbounded"/>
          <xs:element ref="CompressedRelativeRoutePoints"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Point on a competitor's route. -->
  <xs:element name="RoutePoint">
    <xs:complexType>
      <xs:attribute name="x" use="required" type="xs:double"/>
      <xs:attribute name="y" use="required" type="xs:double"/>
      <xs:attribute name="z" use="optional" type="xs:double"/>
      <xs:attribute name="time" use="required" type="xs:dateTime"/>
      <xs:attribute name="type" default="intermediate">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="intermediate"/>
            <xs:enumeration value="start"/>
            <xs:enumeration value="stop"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Point on a competitor's route relative to previous point, or the start point if no previous points. -->
  <xs:element name="RelativeRoutePoint">
    <xs:complexType>
      <!-- Difference in x direction. -->
      <xs:attribute name="xDiff" use="required" type="xs:double"/>
      <!-- Difference in y direction. -->
      <xs:attribute name="yDiff" use="required" type="xs:double"/>
      <!-- Difference in z direction (elevation). -->
      <xs:attribute name="zDiff" use="optional" type="xs:double"/>
      <!-- Difference in time, in seconds. -->
      <xs:attribute name="timeDiff" use="required" type="xs:double"/>
      <!-- The type of route point, allowing for "broken" tracking segments. -->
      <xs:attribute name="type" default="intermediate">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <!-- The point is the first point of a route segment. -->
            <xs:enumeration value="start"/>
            <!-- The point is the last point of a route segment. -->
            <xs:enumeration value="stop"/>
            <!-- The point is not the first or the last point of a route segment. -->
            <xs:enumeration value="intermediate"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Contains the same data as a number of RelativeRoutePoint elements, but compressed according to some algorithm. -->
  <!-- TODO: need to define the data format, steal some ideas from QuickRoute's jpeg-embedded routes  -->
  <xs:element name="CompressedRelativeRoutePoints">
    <xs:complexType mixed="true">
      <xs:attribute name="compressionType" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Control card list for handling rental cards, proposed by Stefan Nordmark. -->
  <xs:element name="CCardList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="IOFVersion" minOccurs="0"/>
        <xs:element ref="CCardOwner" minOccurs="0"/>
        <xs:element ref="CCard" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Control card owner, proposed by Stefan Nordmark. -->
  <xs:element name="CCardOwner">
    <xs:complexType mixed="true"/>
  </xs:element>

  <!-- END 2.1 proposal -->
  
  
  <!-- 1234-12-31Z01:23:45.6Z and 1234-12-31 are both valid -->
  <xs:simpleType name="dateAndOptionalTime">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T([0-1][0-9]|2[0-3])(:[0-5][0-9]){2}(\.[0-9]+)?(Z|((\-|\+)(0[0-9]|1[0-2]):[0-5][0-9])))?"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="timeSpan">
    <xs:restriction base="xs:string">
      <xs:pattern value="(([0-9])+:)?(:[0-5][0-9]){2}(\.[0-9]+)?"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
