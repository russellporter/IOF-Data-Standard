<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  

  ###############################################################################
  ##  INTERNATIONAL ORIENTEERING FEDERATION DATA EXCHANGE FORMAT, VERSION 3.0  ##
  ###############################################################################

  ###############################################################################
  ##                                  DRAFT                                    ##
  ###############################################################################

  This file describes the IOF data exchange format for a wide selection of 
  orienteering information. The format supersedes the previous version 2.0.3.

  Authors:
    Mats Troeng, SWE
  Date:
    04-2011
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>

  <!-- 
    Identifier element, used extensively. 
    The optional type attribute describes the issuer of the identity.
  -->
  <xs:complexType name="Id" mixed="false">
    <xs:attribute name="type" type="xs:string" use="optional"/>
  </xs:complexType>

  <!--
    ##########
    ### Person
    ##########
   
    Represents a person. This could either be a Competitor (see the
    Competitor section) or contact persons in an organisation (see the Organisation
    section) or press (see the "Office" section).

    Lists to exchange:
      - PersonList

  -->

  <!--
    List of persons. This is NOT to be used to exchange competitors.
    Use CompetitorList instead.
  -->
  <xs:element name="PersonList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Person" type="Person" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!--
    Basic information of a person, either a competitor, contact, press etc.
  -->
  <xs:complexType name="Person">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Name" type="PersonName" minOccurs="0"/>
      <xs:element name="BirthDate" type="xs:date" minOccurs="0"/>
      <xs:element name="Address" type="Address" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Contact" type="Contact" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Nationality" type="Country" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="sex">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="F"/>
          <xs:enumeration value="M"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:complexType name="PersonName">
    <xs:sequence>
      <xs:element name="Family" type="xs:string"/>
      <xs:element name="Given" type="xs:string" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrganisationRole">
    <xs:sequence>
      <xs:element name="Type" type="xs:string"/>
      <xs:element name="Person" type="Person"/>
    </xs:sequence>
  </xs:complexType>
  <!--
    ##########
    ### Competitor
    ##########
   
    Elements associated with a Competitor from ranking to control
    card.
    Other elements, e.g. Class, are found in other sections.
   
    Lists to exchange:
      - CompetitorList
      - RankList

  -->

  <!-- CompetitorList
    A list of competitors. This is used to exchange a "brutto" list
    of possible competitors.
    This should NOT be used to exchange entries, use EntryList
    instead.
  -->
  <xs:element name="CompetitorList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Competitor" type="Competitor" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!-- Competitor -->
  <xs:complexType name="Competitor">
    <xs:sequence>
      <xs:element name="Person" type="Person"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="DefaultClass" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="ControlCard" type="ControlCard" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Score" type="Score" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- Control Card -->
  <xs:complexType name="ControlCard">
    <xs:sequence>
      <xs:element name="Id" type="Id"/>
      <xs:element name="PunchingSystem" type="PunchingSystem"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!--
    List of competitors in a specific score or ranking list identified
    by the Name subelement, e.g. 'World Ranking List'.
  -->
  <xs:element name="ScoreList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Name" type="xs:string"/>
        <xs:element name="PersonScore" type="PersonScore" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="PersonScore">
    <xs:sequence>
      <xs:element name="Person" type="Person"/>
      <xs:element name="Score" type="Score"/>
    </xs:sequence>
  </xs:complexType>
  <!--
    The score earned in this event for some purpose, e.g. a ranking
    list. The 'type' attribute is used to specify which purpose.
  -->
  <xs:complexType name="Score">
    <xs:simpleContent>
      <xs:extension base="xs:double">
        <xs:attribute name="type" use="required" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>


  <!--
    ##########
    ### Organisation
    ##########
   
    Information about an organisation, i.e. address, contact person(s) etc.
    An organisation is a general term including federations, clubs, etc.
    Makes some use of the elements in the "Office" section.
    Lists to exchange:
      - OrganisationList
  -->

  <!-- Organisation List
    List of organisations including address and contact information.
  -->
  <xs:element name="OrganisationList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Organisation" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!-- Organisation -->
  <xs:complexType name="Organisation">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
      <xs:element name="ShortName" type="xs:string" minOccurs="0"/>
      <!-- The name of the organisation as appearing in press result lists. -->
      <xs:element name="PressName" type="xs:string" minOccurs="0"/>
      <!-- The home city or geographical location of the organisation as appearing in press result lists. -->
      <!-- To be considered: should PressName and HomeCity be replaced with a single element containing all information? -->
      <xs:element name="HomeCity" type="xs:string" minOccurs="0"/>
      <xs:element name="Type" type="OrganisationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="ParentOrganisation" type="Organisation" minOccurs="0"/>
      <xs:element name="ChildOrganisation" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Country" type="Country" minOccurs="0"/>
      <xs:element name="Address" type="Address" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Contact" type="Contact" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Account" type="Account" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Role" type="OrganisationRole" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <xs:simpleType name="OrganisationType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="IOF"/>
      <xs:enumeration value="IOFRegion"/>
      <xs:enumeration value="NationalFederation"/>
      <xs:enumeration value="NationalRegion"/>
      <xs:enumeration value="Club"/>
      <xs:enumeration value="School"/>
      <xs:enumeration value="Company"/>
      <xs:enumeration value="Military"/>
      <xs:enumeration value="Other"/>
    </xs:restriction>
  </xs:simpleType>

  <!--
    ##########
    ### Event
    ##########
   
    Elemnts holding event specific information
   
    Lists to exchange:
      - EventList
      - ServiceRequestList
  -->

  <!-- EventList
    A list holding a number of events and event classification.
    This can be used to exchange fixtures.
  -->
  <xs:element name="EventList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Event" type="Event" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!-- Event
    The main event element:
      - name of the event
      - start and end dates (to support multiday events)
      - organizing organisation(s)
      - event officials
      - classes
      - races (i.e. event "days")
      - entry data (where to deliver entries)
      - services (e.g. accomodation)
      - web site information
      - accounts for fees
  -->
  <xs:complexType name="Event" mixed="false">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
      <xs:element name="StartTime" type="DateAndOptionalTime" minOccurs="0"/>
      <xs:element name="EndTime" type="DateAndOptionalTime" minOccurs="0"/>
      <xs:element name="Form" type="EventForm" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Organiser" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Official" type="EventOfficial" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EventClass" type="EventClass" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EventRace" type="EventRace" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EntryData" type="EntryData" minOccurs="0"/>
      <xs:element name="Service" type="Service" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Account" type="Account" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="URL" type="EventURL" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Information" type="Information" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Schedule" type="Schedule" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="News" type="Information" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:complexType name="EventOfficial">
    <xs:sequence>
      <xs:element name="Person" type="Person"/>
    </xs:sequence>
    <xs:attribute name="type" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="EntryData">
    <xs:sequence>
      <xs:element name="Address" type="Address" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Contact" type="Contact" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="EventForm">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Individual"/>
      <xs:enumeration value="Team"/>
      <xs:enumeration value="Relay"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="RaceDiscipline">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Sprint"/>
      <xs:enumeration value="Middle"/>
      <xs:enumeration value="Long"/>
      <xs:enumeration value="Ultralong"/>
      <xs:enumeration value="Other"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="RaceClassification">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="International"/>
      <xs:enumeration value="National"/>
      <xs:enumeration value="Regional"/>
      <xs:enumeration value="Local"/>
      <xs:enumeration value="Club"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- Event Class
    A Class extended with event specific information, e.g. whether
    the class is transfered to another class due to lack of entries.
  -->
  <xs:complexType name="EventClass">
    <xs:sequence>
      <xs:element name="Class" type="Class"/>
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="PunchingSystem" type="PunchingSystem" minOccurs="0"/>
      <!-- Keeping track of status of class (e g if results should be considered invalid due to misplaced constrols) -->
      <xs:element name="Status" type="EventClassStatus" minOccurs="0"/>
      <xs:element name="EventRaceClass" type="EventRaceClass" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="numberOfCompetitors" type="xs:integer" use="optional"/> <!-- competitor: a person or a team -->
    <xs:attribute name="maxNumberOfCompetitors" type="xs:integer" use="optional"/> <!-- competitor: a person or a team -->
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <xs:simpleType name="EventClassStatus">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Normal"/>
      <xs:enumeration value="Invalidated"/>
      <xs:enumeration value="InvalidatedNoFee"/>
    </xs:restriction>
  </xs:simpleType>


  <!-- Event Race
    An event consists of a number of event races. The number is equal
    to the number of times a competitor should start:
      - one event race for a single day event
      - N event races for an N day event
      - two event races for a qualification and final (even if they
        are the same day)
  -->
  <xs:complexType name="EventRace">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
      <xs:element name="StartTime" type="DateAndOptionalTime" minOccurs="0"/>
      <xs:element name="EndTime" type="DateAndOptionalTime" minOccurs="0"/>
      <xs:element name="Classification" type="RaceClassification" minOccurs="0"/>
      <xs:element name="Position" type="GeoPosition" minOccurs="0"/>
      <xs:element name="Discipline" type="RaceDiscipline" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Attribute" type="RaceAttribute" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Organiser" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Official" type="EventOfficial" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Service" type="Service" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="URL" type="EventURL" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Information" type="Information" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Schedule" type="Schedule" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="News" type="Information" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <xs:complexType name="EventURL">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="type" use="required">
          <xs:simpleType>
            <xs:restriction base="xs:NMTOKEN">
              <xs:enumeration value="Website"/>
              <xs:enumeration value="StartList"/>
              <xs:enumeration value="ResultList"/>
              <xs:enumeration value="Other"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="Schedule">
    <xs:sequence>
      <xs:element name="StartTime" type="xs:dateTime"/>
      <xs:element name="EndTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="Title" type="xs:string"/>
      <xs:element name="Venue" type="xs:string" minOccurs="0"/>
      <xs:element name="Position" type="GeoPosition" minOccurs="0"/>
      <xs:element name="Details" type="xs:string" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- TODO: better name -->
  <xs:complexType name="Information">
    <xs:sequence>
      <xs:element name="Title" type="xs:string"/>
      <xs:element name="Content" type="xs:string"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>



  <!-- Fee
    Competitor fees for entering the event.
  -->
  <xs:complexType name="Fee">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="LanguageString" minOccurs="0"/>
      <xs:element name="Amount" type="Amount" minOccurs="0"/>
      <!-- The first entry time that the entry fee is valid for. -->
      <xs:element name="ValidFromTime" type="xs:dateTime" minOccurs="0"/>
      <!-- The last entry time that the entry fee is valid for. -->
      <xs:element name="ValidToTime" type="xs:dateTime" minOccurs="0"/>
      <!-- The start of the birth date interval that the entry fee should be applied to. -->
      <xs:element name="FromDateOfBirth" type="xs:date" minOccurs="0"/>
      <!-- The end of the birth date interval that the entry fee should be applied to. -->
      <xs:element name="ToDateOfBirth" type="xs:date" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:complexType name="Amount">
    <xs:simpleContent>
      <xs:extension base="xs:decimal">
        <xs:attribute name="currency" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <!--
    ##########
    ### Entries
    ##########
   
    Elements supporting entries for an event, especially
    the persons entering
   
    Lists to exchange:
      - EntryList
  -->

  <!-- EntryList
    A number of Organisation Entries each holding an organisation, an organisation contact and
    the persons entering the competition, probably aggregated
    into teams if it is for a relay.
  -->
  <xs:element name="EntryList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="TeamEntry" type="TeamEntry" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="PersonEntry" type="PersonEntry" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>


  <!-- Entry
    An entry consists of
    1) a person, his/hers personal control card, and a rank
       (e.g. from a ranking list, this could be needed by the event
       software to allocate starting times).
    2) a team, which holds a number of persons possibly ordered in
       a sequence within the team.
  -->
  <xs:complexType name="PersonEntry">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Person" type="Person"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="ControlCard" type="ControlCard" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Score" type="Score" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EventClass" type="EventClass" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EventRace" type="EventRace" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="AllocationControl" type="AllocationControl" minOccurs="0"/>
      <xs:element name="EntryTime" type="xs:dateTime"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  
  <xs:complexType name="TeamEntry">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="TeamPersonEntry" type="TeamPersonEntry" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EventClass" type="EventClass" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="EventRace" type="EventRace" minOccurs="0" maxOccurs="unbounded"/>
      <!-- Fees for the team as a whole, not related to the individual persons -->
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="AllocationControl" type="AllocationControl" minOccurs="0"/>
      <xs:element name="EntryTime" type="xs:dateTime"/>
    </xs:sequence>
    <xs:attribute name="nonCompetitor" type="xs:boolean" default="false" />
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <xs:complexType name="TeamPersonEntry">
    <xs:sequence>
      <xs:element name="Person" type="Person"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="ControlCard" type="ControlCard" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Score" type="Score" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Leg" type="xs:integer" minOccurs="0"/>
      <!-- Support for defining the competitor starting order within a team at a parallel relay leg (e g 25-manna) -->
      <xs:element name="LegOrder" type="xs:integer" minOccurs="0"/>
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="AllocationControl" type="AllocationControl" minOccurs="0"/>
      <xs:element name="EntryTime" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>

  <!-- AllocationControl
    Used to state start time allocation requests.
    It consists of a possible reference Organisation or Person and the
    allocation request, e.g. late start or grouped with the reference
    Organisation/Person.
    This way it is possible to state requests to the event organizer
    so that e.g. all members of an organisation has start times close to each
    other - or parents have start times far from each other.
    It is totally up to the event software and organizers whether
    they will support such requests.
  -->
  <xs:complexType name="AllocationControl">
    <xs:sequence>
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="Person" type="Person" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="type" default="Normal">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="LateStart"/>
          <xs:enumeration value="Normal"/>
          <xs:enumeration value="EarlyStart"/>
          <xs:enumeration value="DistributedFromRef"/>
          <xs:enumeration value="Other"/>
          <xs:enumeration value="GroupedWithRef"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <!--
    ##########
    ### Start List
    ##########
   
    Elements maintaining information of the start and start list
   
    Lists to exchange:
      - StartList
  -->

  <!-- StartList
    A list containing the event (or identification) and a number
    of class start lists
  -->
  <xs:element name="StartList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Event" type="Event" minOccurs="0"/>
        <xs:element name="ClassStart" type="ClassStart" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
      <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
    </xs:complexType>
  </xs:element>

  <!-- ClassStart
    The start list of a single class containing either individual
    start times for competitors or team start times for relays
  -->
  <xs:complexType name="ClassStart">
    <xs:sequence>
      <xs:element name="EventClass" type="EventClass"/>
      <xs:element name="TeamStart" type="TeamStart" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="PersonStart" type="PersonStart" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="timeResolution" type="xs:double" use="optional" default="1"/>
  </xs:complexType>

  <!-- PersonStart
    The start time(s) of a single competitor. In case of a multi day
    event all start times are listed.
  -->
  <xs:complexType name="PersonStart">
    <xs:sequence>
      <xs:element name="Person" type="Person" />
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="Leg" type="xs:integer" minOccurs="0"/>
      <!-- Support for defining the competitor starting order within a team at a parallel relay leg (e g 25-manna) -->
      <xs:element name="LegOrder" type="xs:integer" minOccurs="0"/>
      <xs:element name="Start" type="Start" minOccurs="0"/>
      <xs:element name="CourseVariation" type="CourseVariation" minOccurs="0"/>
      <xs:element name="ControlCard" minOccurs="0"/>
      <xs:element name="StartName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TeamStart">
    <xs:sequence>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Start" type="Start" minOccurs="0"/>
      <xs:element name="PersonStart" type="PersonStart" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <!-- Start
    The start information of a competitor of a single race.
    It contains the start number, bib number, control card of the
    competitor, the start time, the team order (if relay) and the
    course length.
  -->
  <xs:complexType name="Start">
    <xs:sequence>
      <xs:element name="BibNumber" type="xs:string" minOccurs="0"/>
      <xs:element name="StartTime" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!--
    ##########
    ### ResultList
    ##########

    Results from an event. This can be a complete list (i.e. after
    the event), a snapshot (current standings - while the event is
    under way), or a delta list (changes since last list, meant for
    frequent exchange of results).

    Lists to exchange:
      - ResultList
  -->

  <!-- ResultList
    A result list containing an event (or identifier) and a number
    of class results. The list can be more or less complete as
    explained above.
  -->
  <xs:element name="ResultList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Event" type="Event" minOccurs="0"/>
        <xs:element name="ClassResult" type="ClassResult" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
      <xs:attribute name="status" default="Complete">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="Complete"/>
            <xs:enumeration value="Delta"/>
            <xs:enumeration value="Snapshot"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
    </xs:complexType>
  </xs:element>

  <!-- ClassResult
    Results from a single class. It consists of a Class and a number
    of person or team results.
  -->
  <xs:complexType name="ClassResult">
    <xs:sequence>
      <xs:element name="EventClass" type="EventClass" minOccurs="0" />
      <xs:element name="CourseVariation" type="CourseVariation" minOccurs="0" />
      <xs:element name="PersonResult" type="PersonResult" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="TeamResult" type="TeamResult" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="timeResolution" type="xs:double" use="optional" default="1"/>
  </xs:complexType>
  <xs:complexType name="PersonResult">
    <xs:sequence>
      <xs:element name="Person" type="Person"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="Leg" type="xs:integer" minOccurs="0"/>
      <!-- Support for defining the competitor starting order within a team at a parallel relay leg (e g 25-manna) -->
      <xs:element name="LegOrder" type="xs:integer" minOccurs="0"/>
      <xs:element name="Result" type="Result"/>
      <xs:element name="CourseVariation" type="CourseVariation" minOccurs="0"/>
      <xs:element name="ControlCard" minOccurs="0"/>
      <xs:element name="SplitTime" minOccurs="0" maxOccurs="unbounded"/>
      <!-- Support for Trail-O results. -->
      <xs:element name="ControlAnswer" type="ControlAnswer" minOccurs="0" maxOccurs="unbounded"/>
      <!-- Support for GPS routes/tracking. -->
      <xs:element name="Route" type="Route" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TeamResult">
    <xs:sequence>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Result" type="Result"/>
      <xs:element name="PersonResult" type="PersonResult" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <!-- Result
    Overall result of a single competitor. For a multiday event
    this is the accumulated result
  -->
  <xs:complexType name="Result">
    <xs:sequence>
      <xs:element name="BibNumber" type="xs:string" minOccurs="0"/>
      <xs:element name="StartTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="FinishTime" type="xs:dateTime" minOccurs="0"/>
      <!-- Time in seconds -->
      <xs:element name="Time" type="xs:double" minOccurs="0"/>
      <xs:element name="Position" type="xs:integer" minOccurs="0"/>
      <xs:element name="Status" type="ResultStatus"/>
      <xs:element name="Score" type="Score" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- Status
    The status of the competitor or team at the time of the result
    generation:
      - Inactive           : Has not yet started
      - DidNotEnter        : Did not enter (in this race)
      - DidNotStart        : Did not start (in this race)
      - Active             : Currently on course
      - Finished           : Finished but not validated
      - OK                 : Finished and validated
      - MissingPunch       : Missing Punch
      - DidNotFinish       : Did Not Finish
      - Disqualified       : Disqualified
      - NotCompeting       : Not Competing (running outside the competition)
      - SportingWithdrawal : Sporting Withdrawal (e.g. helping injured)
      - OverTime           : Overtime, i.e. did not finish within max time
      - Moved              : Moved to another class
      - MovedUp            : Moved to a "better" class, in case of entry
                             restrictions
      - Cancelled          : The competitor has cancelled his/hers entry
  -->
  <xs:simpleType name="ResultStatus">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Inactive"/>
      <xs:enumeration value="MissingPunch"/>
      <xs:enumeration value="DidNotEnter"/>
      <xs:enumeration value="DidNotStart"/>
      <xs:enumeration value="MovedUp"/>
      <xs:enumeration value="OverTime"/>
      <xs:enumeration value="Moved"/>
      <xs:enumeration value="Active"/>
      <xs:enumeration value="Disqualified"/>
      <xs:enumeration value="DidNotFinish"/>
      <xs:enumeration value="Cancelled"/>
      <xs:enumeration value="SportingWithdrawal"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="NotCompeting"/>
      <xs:enumeration value="Finished"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- SplitTime
    Time elapsed from start to punching the control. Each control of the 
    competitor's course has to be defined in a SplitTime element, even if 
    the control has not been punched.
    The 'status' attribute holds the status of the split time as follows:
      OK:         Control belongs to the course and has been punched 
                  (either by electronical punching or pin punching).
                  If the time is not available or invalid, omit the 'Time'
                  element.
      Missing:    Control belongs to the course but has not been punched.
      Additional: Control does not belong to the course, but the competitor
                  has punched it.  
  -->
  <xs:complexType name="SplitTime">
    <xs:sequence>
      <xs:element name="ControlCode" type="xs:string"/>
      <!-- Time in seconds -->
      <xs:element name="Time" type="xs:double" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="status" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="OK"/>
          <xs:enumeration value="Missing"/>
          <xs:enumeration value="Additional"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <!-- Result Selection
    Used to specify subresults of interest for the press (see the
    Press element in the "Office" section). The selection consists
    of a list of organisations, classes and a max position
    in the list, e.g. the top 3.
  -->
  <xs:complexType name="ResultSelection">
    <xs:sequence>
      <xs:element name="Organisation" type="Organisation" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Class" type="Class" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="MaxPosition" type="xs:integer"/>
      <xs:element name="MaxPositionForOrganisations" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!--
    ##########
    ### Class
    ##########
   
    Elements associated with an Event Class - this being a real
    class in the event or a "standard" class.
    Lists to exchange are:
      - ClassData
  -->

  <!-- Class Data
    A list of classes.
  -->
  <xs:element name="ClassList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Class" type="Class" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="RaceAttribute" mixed="false">
    <!-- todo: enum -->
    <xs:attribute name="type" type="xs:string"/>
  </xs:complexType>
  <xs:complexType name="ClassAttribute" mixed="false">
    <!-- todo: enum -->
    <xs:attribute name="type" type="xs:string"/>
  </xs:complexType>

  <!-- Class -->
  <xs:complexType name="Class">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
      <xs:element name="ShortName" type="xs:string" minOccurs="0"/>
      <xs:element name="Leg" type="Leg" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Attribute" type="ClassAttribute" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="minAge" type="xs:integer" use="optional"/>
    <xs:attribute name="maxAge" type="xs:integer" use="optional"/>
    <xs:attribute name="sex" use="optional" default="B">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="B"/>
          <xs:enumeration value="F"/>
          <xs:enumeration value="M"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="teamMinAge" type="xs:integer" use="optional"/>
    <xs:attribute name="teamMaxAge" type="xs:integer" use="optional"/>
    <xs:attribute name="timePresentation" type="xs:boolean" use="optional" default="true"/>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <xs:complexType name="Leg">
    <xs:sequence>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="minCompetitors" type="xs:integer" use="optional" default="1"/>
    <xs:attribute name="maxCompetitors" type="xs:integer" use="optional" default="1"/>
  </xs:complexType>



  <!-- Class Race Info
    Information about a class with respect to an event.
    The Class information above may make sense without attachment
    to an event, the information below doesn't.
  -->
  <xs:complexType name="EventRaceClass">
    <xs:sequence>
      <xs:element name="EventRace" type="EventRace"/>
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="FirstStart" type="xs:dateTime" minOccurs="0"/>
      <!-- Time in seconds -->
      <xs:element name="Status" type="EventRaceClassStatus"/>
      <xs:element name="CourseVariation" type="CourseVariation" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:simpleType name="EventRaceClassStatus">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Normal"/>
      <xs:enumeration value="Invalidated"/>
      <xs:enumeration value="InvalidatedNoFee"/>
      <xs:enumeration value="Excluded"/>
    </xs:restriction>
  </xs:simpleType>

  <!--
    ##########
    ### Control and Courses
    ##########
   
    All elements with information about controls and courses.
    Only exception is the Control Card, which is found in the
    Competitor section.
   
    Lists to exchange:
      - CourseData
  -->

  <!-- CourseData
    A list of starting points, finish controls, "real" controls,
    and courses. This defines all the control and course information.
  -->
  <xs:element name="CourseData">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Map" type="Map" minOccurs="0"/>
        <xs:element name="Control" type="Control" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="Course" type="Course" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="TeamCourseCombination" type="TeamCourseCombination" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!-- Control
    A Control consists of a control code, a description, a position
    in the terrain, a position on the map and a punching unit.
    This element is not the one used in the courses. For that, see
    CourseControl below.
  -->
  <xs:complexType name="Control">
    <xs:sequence>
      <xs:element name="Code" type="xs:string"/>
      <xs:element name="Description" type="ControlDescription" minOccurs="0"/>
      <xs:element name="Position" type="GeoPosition" minOccurs="0"/>
      <xs:element name="PunchingUnit" type="PunchingUnit" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="MapPosition" type="MapPosition" minOccurs="0"/>
      <xs:element name="Comment" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:complexType name="ControlDescription">
    <xs:sequence>
      <xs:element name="Box" type="ControlDescriptionBox" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Text" type="LanguageString" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:complexType name="ControlDescriptionBox">
    <xs:sequence>
      <xs:element name="Symbol" type="ControlDescriptionSymbol" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Text" type="xs:string" minOccurs="0" />
    </xs:sequence>
    <xs:attribute name="column" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="A"/>
          <xs:enumeration value="B"/>
          <xs:enumeration value="C"/>
          <xs:enumeration value="D"/>
          <xs:enumeration value="E"/>
          <xs:enumeration value="F"/>
          <xs:enumeration value="G"/>
          <xs:enumeration value="H"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hasDiagonal" type="xs:boolean" default="false"/>
  </xs:complexType>
  <xs:complexType name="ControlDescriptionSymbol">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- 
    Geographical position, e g of a control
  -->
  <xs:complexType name="GeoPosition">
    <xs:attribute name="lng" use="required" type="xs:double"/>
    <xs:attribute name="lat" use="required" type="xs:double"/>
    <!-- Elevation of control in meters -->
    <xs:attribute name="alt" use="optional" type="xs:double"/>
  </xs:complexType>

  <!-- Map
    Information of the map used, scale and upper left corner of the
    bitmap used in course setting software wrt. the "real" map (yes,
    this _is_ in fact used!)
  -->
  <xs:complexType name="Map">
    <xs:sequence>
      <xs:element name="Scale"  type="xs:string"/>
      <xs:element name="MapPosition" type="MapPosition"/>
    </xs:sequence>
  </xs:complexType>

  <!-- MapPosition
    Position of the Control on the Map
  -->
  <xs:complexType name="MapPosition">
    <xs:attribute name="x" use="required" type="xs:double"/>
    <xs:attribute name="y" use="required" type="xs:double"/>
    <xs:attribute name="unit" default="mm">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="px"/>
          <xs:enumeration value="mm"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <!-- Course
    A Course consists of one or more Course Variations. This is done
    to support relays using "gaffling".
  -->
  <xs:complexType name="Course">
    <xs:sequence>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="Event" type="Event" minOccurs="0"/>
      <xs:element name="EventRace" type="EventRace" minOccurs="0"/>
      <xs:element name="Class" type="Class" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="CourseVariation" type="CourseVariation" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="numberOfCompetitors" type="xs:integer" use="optional"/>
  </xs:complexType>

  <!-- Course Variation
    Consists of a name, length, climb, start point, a number of
    course controls and a finish.
  -->
  <xs:complexType name="CourseVariation">
    <xs:sequence>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
      <xs:element name="Length" type="xs:double" minOccurs="0"/>
      <xs:element name="Climb" type="xs:double" minOccurs="0"/>
      <!-- BEGIN 2.1 addition -->
      <!-- added minOccurs="0" - might sometimes want to express course variation id and course length but not the controls -->
      <xs:element name="Control" type="CourseControl" minOccurs="0" maxOccurs="unbounded"/>
      <!-- END 2.1 addition -->
    </xs:sequence>
    <xs:attribute name="numberOfCompetitors" type="xs:integer" use="optional"/>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- CourseControl
    A control included in a course. It consists of a sequence number,
    a "real" control, a leglength and a position on the map for the
    control text, i.e. its sequence number.
  -->
  <xs:complexType name="CourseControl">
    <xs:sequence>
      <xs:element name="Text" type="xs:string"/>
      <xs:element name="Control" type="Control"/>
      <xs:element name="Comment" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="LegLength" type="xs:double" minOccurs="0"/>
      <xs:element name="MapTextPosition" type="MapPosition" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Control"/>
          <xs:enumeration value="Start"/>
          <xs:enumeration value="Finish"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <!-- see http://orienteering.org/wp-content/uploads/2010/12/Control-Descriptions-2004-symbols-only.pdf -->
    <xs:attribute name="specialInstruction" default="None">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="None"/>
          <xs:enumeration value="TapedRoute"/>
          <xs:enumeration value="FunnelTapedRoute"/>
          <xs:enumeration value="MandatoryCrossingPoint"/>
          <xs:enumeration value="MandatoryOutOfBoundsAreaPassage"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <!-- length of taped route if different from value specified in LegLength element, i e when Special Instruction 13.1 is used -->
    <xs:attribute name="tapedRouteLength" type="xs:double" use="optional" />
  </xs:complexType>

  <!-- TeamCourseCombination
    A TeamCourseCombination defines the courses assigned to the members of a team
    to support relays using "gaffling".
  -->
  <xs:complexType name="TeamCourseCombination">
    <xs:sequence>
      <xs:element name="BibNumber" type="xs:string"/>
      <xs:element name="CourseAssignment" minOccurs="1" maxOccurs="unbounded">
        <xs:complexType mixed="false">
          <xs:sequence>
            <xs:element name="Leg" type="xs:integer"/>
            <xs:element name="LegOrder" type="xs:integer" minOccurs="0"/>
            <xs:element name="CourseVariation" type="CourseVariation"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <!-- Punching -->
  <xs:complexType name="PunchingUnit">
    <xs:sequence>
      <xs:element name="Id" type="Id"/>
      <xs:element name="PunchingSystem" type="PunchingSystem"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>
  <xs:simpleType name="PunchingSystem">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Manual"/>
      <xs:enumeration value="Emit"/>
      <xs:enumeration value="SI"/>
      <xs:enumeration value="Other"/>
    </xs:restriction>
  </xs:simpleType>

  <!--
    ##########
    ### "Office" elements
    ##########
   
    The following elements are used for non-orienteering purposes,
    i.e. accomodation, payment, addresses, press, dates etc.
   
    Also different "general purpose" elements, e.g. date and time.
   
    Lists to exchange:
      - OrganisationList
      - TransactionList
  -->

  <!-- Press
    A special organisation that can contain a request for a
    special selection of results after the event. E.g. a foreign
    paper can have a speciel interest in the results of the
    competitors of that nationality.
  -->
  <xs:complexType name="Press">
    <xs:sequence>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="ContactPerson" type="Person" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Address" type="Address" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Contact" type="Contact" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="ResultSelection" type="ResultSelection" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="mediaType" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Magazine"/>
          <xs:enumeration value="TV"/>
          <xs:enumeration value="Paper"/>
          <xs:enumeration value="Other"/>
          <xs:enumeration value="Web"/>
          <xs:enumeration value="Radio"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- PressList
    A list of Press elements
  -->
  <xs:element name="PressList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Press" type="Press" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!-- Service
    A general purpose service request, e.g. for accomodation.
  -->
  <xs:complexType name="Service">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="LanguageString" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Comment" type="LanguageString" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="MaxNumber" type="xs:double" minOccurs="0"/>
    </xs:sequence>
    <!-- used to mark special services, like rental cards -->
    <xs:attribute name="type" type="xs:string" use="optional"/>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- Service Request List
    List of requests from organisations.
  -->
  <xs:element name="ServiceRequestList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Event" type="Event" minOccurs="0"/>
        <xs:element name="OrganisationServiceRequest" type="OrganisationServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="PersonServiceRequest" type="PersonServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="OrganisationServiceRequest">
    <xs:sequence>
      <xs:element name="Organisation" type="Organisation"/>
      <xs:element name="ServiceRequest" type="ServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="PersonServiceRequest" type="PersonServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonServiceRequest">
    <xs:sequence>
      <xs:element name="Person" type="Person"/>
      <xs:element name="ServiceRequest" type="ServiceRequest" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ServiceRequest">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Service" type="Service"/>
      <xs:element name="Quantity" type="xs:double"/>
      <xs:element name="Fee" type="Fee" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Comment" type="xs:string" minOccurs="0"/>
      <!-- todo: support for metadata -->
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- Account -->
  <xs:complexType name="Account" mixed="false">
    <xs:attribute name="type" type="xs:string"/>
  </xs:complexType>

  <!-- Transaction
    A financial transaction between two accounts, possibly linked
    to a number of entries and/or service requests.
  -->
  <xs:complexType name="Transaction">
    <xs:sequence>
      <xs:element name="Account" type="Account" minOccurs="0"/>
      <xs:element name="Time" type="xs:dateTime" minOccurs="0" />
      <xs:element name="Amount" type="Amount"/>
      <xs:element name="Organisation" type="Organisation" minOccurs="0"/>
      <xs:element name="Person" type="Person" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="TeamEntry" type="TeamEntry" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="PersonEntry" type="PersonEntry" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="OrganisationServiceRequest" type="OrganisationServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="PersonServiceRequest" type="PersonServiceRequest" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- TransactionList
    A list of transactions.
  -->
  <xs:element name="TransactionList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Event" type="Event" minOccurs="0"/>
        <xs:element name="Transaction" type="Transaction" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <!-- Address -->
  <xs:complexType name="Address">
    <xs:sequence>
      <xs:element name="CareOf" type="xs:string" minOccurs="0"/>
      <xs:element name="Street" type="xs:string"/>
      <xs:element name="ZipCode" type="xs:string" minOccurs="0"/>
      <xs:element name="City" type="xs:string"/>
      <xs:element name="Country" type="Country"/>
    </xs:sequence>
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Other"/>
          <xs:enumeration value="Official"/>
          <xs:enumeration value="Work"/>
          <xs:enumeration value="Home"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>

  <!-- Country -->
  <xs:complexType name="Country" mixed="false">
    <xs:sequence>
      <xs:element name="Id" type="Id" minOccurs="0"/>
      <xs:element name="Name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- Contact -->
  <xs:complexType name="Contact">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="HomePhoneNumber"/>
          <xs:enumeration value="OfficialPhoneNumber"/>
          <xs:enumeration value="WorkPhoneNumber"/>
          <xs:enumeration value="FaxNumber"/>
          <xs:enumeration value="EmailAddress"/>
          <xs:enumeration value="WebAddress"/>
          <xs:enumeration value="Other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="modifyTime" type="xs:dateTime" use="optional"/>
  </xs:complexType>


  <!-- Element describing the correct answer, the selected answer and the time used on a Trail-O control. -->
  <xs:complexType name="ControlAnswer">
    <xs:sequence>
      <xs:element name="Answer" type="xs:string"/>
      <xs:element name="CorrectAnswer" type="xs:string"/>
      <!-- Time in seconds -->
      <xs:element name="Time" type="xs:double" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!--
  *** GPS ROUTES / TRACKING ***

  Comment: Describing a route in xml is rather "chatty", leading to very large amount of data when there are many competitors.
  There is probably need for some compression (e g binary data expressed as a base64-encoded string).  -->

  <!-- A competitor's route, recorded by a tracking device. A route contains a number of route points,
  where every point has longitude, latitude, altitude (optionally) and time. -->
  <xs:complexType name="Route">
    <xs:sequence>
      <xs:element name="RoutePoint" type="RoutePoint" minOccurs="0" maxOccurs="unbounded"/>
      <!-- GZip compressed list of RoutePoints -->
      <xs:element name="CompressedRoutePoints" minOccurs="0" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>

  <!-- Point on a competitor's route. -->
  <xs:complexType name="RoutePoint">
    <xs:attribute name="lng" use="required" type="xs:double"/>
    <xs:attribute name="lat" use="required" type="xs:double"/>
    <xs:attribute name="alt" use="optional" type="xs:double"/>
    <xs:attribute name="time" use="required" type="xs:dateTime"/>
    <xs:attribute name="type" default="Intermediate">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="Intermediate"/>
          <xs:enumeration value="Start"/>
          <xs:enumeration value="Stop"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>


  <!-- Control card list for handling rental cards, proposed by Stefan Nordmark. -->
  <xs:element name="ControlCardList">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ControlCardOwner" type="xs:string" minOccurs="0"/>
        <xs:element name="ControlCard" type="ControlCard" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iofVersion" type="xs:string" fixed="3.0"/>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="DateAndOptionalTime">
    <xs:sequence>
      <xs:element name="Date" type="xs:date" />
      <xs:element name="Time" type="xs:time" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LanguageString">
    <xs:attribute name="language" type="xs:string" use="optional"/>
  </xs:complexType>


</xs:schema>
